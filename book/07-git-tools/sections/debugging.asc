=== Debugging with Git

In addition to being primarily for version control, Git also provides a couple commands to help you debug your source code projects.
Because Git is designed to handle nearly any type of content, these tools are pretty generic, but they can often help you hunt for a bug or culprit when things go wrong.

[[_file_annotation]]
==== File Annotation

If you track down a bug in your code and want to know when it was introduced and why, file annotation is often your best tool.
It shows you what commit was the last to modify each line of any file.
So if you see that a method in your code is buggy, you can annotate the file with *Blame* to determine which commit was responsible for the introduction of that line.
You can right-click and *Blame* a file in working folder using the solution explorer, or a file change by a commit in Team Explorer.

The following shows the commits introducing lines of the recording changes section of this guide.

.Blame.
image::images/blame.png["Blame."]

Notice that the first field is the partial SHA of the commit that last modified that line.
The next two fields are values extracted from that commit -- the author name and the authored date of that commit -- so you can easily see who modified that line and when.
After that come the line number and the content of the file.
Hovering over the commit shows a tip with further commit details including the commit message.

Another cool thing about Git is that it doesn't track file renames explicitly.
It records the snapshots and then tries to figure out what was renamed implicitly, after the fact.
In the example below, the highlighted tip shows that the relevant section of SwitchingToGitInVisualStudio.asc originally came from progit.asc.

.Blame Across Rename.
image::images/blame-across-rename.png["Blame Across Rename."]
