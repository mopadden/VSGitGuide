[[_git_reset]]
=== Reset Demystified

Before moving on to more specialized tools, let's talk about *Reset* and *Checkout*.
These commands are two of the most confusing parts of Git when you first encounter them.
They do so many things that it seems hopeless to actually understand them and employ them properly.
For this, we recommend a simple metaphor.

==== The Three Trees

An easier way to think about *Reset* and *Checkout* is through the mental frame of Git being a content manager of three different trees.
By ``tree'' here, we really mean ``collection of files'', not specifically the data structure.
(There are a few cases where the index doesn't exactly act like a tree, but for our purposes it is easier to think about it this way for now.)

Git as a system manages and manipulates three trees in its normal operation:

[cols="1,2",options="header"]
|================================
| Tree              | Role
| HEAD              | Last commit snapshot, next parent
| Index             | Proposed next commit snapshot
| Working Directory | Sandbox
|================================

===== The HEAD

*_HEAD_* is the pointer to the current branch reference, which is in turn a pointer to the last commit made on that branch.
That means HEAD will be the parent of the next commit that is created.
It's generally simplest to think of HEAD as the snapshot of _your last commit on that branch_.


[[_the_index]]
===== The Index

The *_index_* is your _proposed next commit_.
We've also been referring to this concept as Git's ``Staging Area'' as this is what Git looks at when you commit your changes.

Git populates this index with a list of all the file contents that were last checked out into your working directory and what they looked like when they were originally checked out.
You then replace some of those files with new versions of them, and *Commit* converts that into the tree for a new commit.

The index is not technically a tree structure -- it's actually implemented as a flattened manifest -- but for our purposes it's close enough.

===== The Working Directory

Finally, you have your *_working directory_* (also commonly referred to as the ``working tree'').
The other two trees store their content in an efficient but inconvenient manner, inside the `.git` folder.
The working directory unpacks them into actual files, which makes it much easier for you to edit them.
Think of the working directory as a _sandbox_, where you can try changes out before committing them to your staging area (index) and then to history.

[source,console]
----
$ tree
.
├── README
├── Rakefile
└── lib
    └── simplegit.rb

1 directory, 3 files
----

==== The Workflow

Git's typical workflow is to record snapshots of your project in successively better states, by manipulating these three trees.

image::images/reset-workflow.png[]

Let's visualize this process: say you create a new repository, and add a single file into the working directory.
We'll call this *v1* of the file, and we'll indicate it in blue.
The new repository will have a HEAD reference which points to the unborn `master` branch.

image::images/reset-ex1.png[]

At this point, only the working directory tree has any content.

Now we want to commit this file, so we use *Stage* to take content in the working directory and copy it to the index.

image::images/reset-ex2.png[]

Then we *Commit*, which takes the contents of the index and saves it as a permanent snapshot, creates a commit object which points to that snapshot, and updates `master` to point to that commit.

image::images/reset-ex3.png[]

Team Explorer *Changes*, will show no changes, because all three trees are the same.

Now we want to make a change to that file and commit it.
We'll go through the same process; first, we change the file in our working directory.
Let's call this *v2* of the file, and indicate it in red.

image::images/reset-ex4.png[]

Team Explorer *Changes*, right now, will show the file under ``Changes'', because that entry differs between the index and the working directory.
Next we click *add* on it to stage it into our index.

image::images/reset-ex5.png[]

At this point, Team Explorer *Changes*, shows the file under ``Staged Changes'' because the index and HEAD differ -- that is, our proposed next commit is now different from our last commit.
Finally, we run *Commit* to finalize the commit.

image::images/reset-ex6.png[]

Now Team Explorer *Changes* will show no staged changes or changes, because all three trees are the same again.

Switching branches or cloning goes through a similar process.
When you checkout a branch, it changes *HEAD* to point to the new branch ref, populates your *index* with the snapshot of that commit, then copies the contents of the *index* into your *working Directory*.

==== The Role of Reset

The effect of *Reset* makes more sense when viewed in this context.

For the purposes of these examples, let's say that we've modified `file.txt` again and committed it a third time.
So now our history looks like this:

image::images/reset-start.png[]

Let's now walk through exactly what *Reset* does when you use it.
It directly manipulates these three trees in a simple and predictable way.
A mixed reset updates *_HEAD_* and *_Index_* without updating the working directory, a hard reset updates all three.

===== Keep Changes: Move HEAD and Index (--mixed)

The first thing *Reset* will do is move what HEAD points to.
This isn't the same as changing HEAD itself (which is what `checkout` does); *Reset* moves the branch that HEAD is pointing to.
This means if HEAD is set to the `master` branch (i.e. you're currently on the `master` branch), resetting to commit `9e5e6a4` will start by making `master` point to `9e5e6a4`.
Thene *Reset* updates the index with the contents of whatever snapshot HEAD now points to.

image::images/reset-mixed.png[]

Now take a second to look at that diagram and realize what happened: it undid your last `commit`, and also unstaged everything.
You rolled the branch back to before staging and committing all your changes.

===== Delete Changes: Updating the Working Directory (--hard)

The last thing that *Reset* will do is to make the working directory look like the index.
If you use the `--hard` option, it will continue to this stage.

image::images/reset-hard.png[]

So let's think about what just happened.
You undid the commit, staged changes, *and* all the work you did in your working directory.

[CAUTION]
This is the only dangerous variant of *Reset*, and one of the very few cases where Git will actually destroy data.
Any *Reset*>*Keep Changes* can be pretty easily undone, but *Reset*>*Delete Changes* cannot, since it forcibly overwrites files in the working directory.
In this particular case, we still have the *v3* version of our file in a commit in our Git DB, and we could get it back by looking at our `reflog` with the git command line. If we had not committed it, Git still would have overwritten the file and it would be unrecoverable.

==== Squashing

Let's look at how to do something interesting with this newfound power -- squashing commits.

Say you have a series of commits with messages like ``oops.'', ``WIP'' and ``forgot this file''.
You can use *Reset* to quickly and easily squash them into a single commit that makes you look really smart.

Let's say you have a project where the first commit has one file, the second commit added a new file and changed the first, and the third commit changed the first file again.
The second commit was a work in progress and you want to squash it down.

image::images/reset-squash-r1.png[]

You can run *Reset*>*Keep Changes* to move the branch back to the last commit you want to keep:

image::images/reset-squash-r2.png[]

And then simply run *Commit* the changes again:

image::images/reset-squash-r3.png[]

Now you can see that your reachable history, the history you would push, now looks like you had one commit with `file-a.txt` v1, then a second that both modified `file-a.txt` to v3 and added `file-b.txt`.
The commit with the v2 version of the file is no longer in the history.

[WARNING]
Remember to ensure that there are no uncommitted changes in your working directory before squashing commits with this method, to avoid accidentally including additional changes.

==== Check It Out

Finally, you may wonder what the difference between *checkout* and `reset` is.
Like `reset`, `checkout` manipulates the three trees, and it is a bit different depending on whether you give the command a file path or not.

Checking out a branch is pretty similar to doing a *Reset*>*Delete Changes* to that branch, in that it updates all three trees for you to look like `[branch]`, but there are two important differences.

First, unlike *Reset*>*Delete Changes*, *Checkout* is working-directory safe; it will check to make sure it's not blowing away files that have changes to them.
Actually, it's a bit smarter than that -- it tries to do a trivial merge in the working directory, so all of the files you _haven't_ changed will be updated.
*Reset*>*Delete Changes*, on the other hand, will simply replace everything across the board without checking.

The second important difference is how *Checkout* updates HEAD.
Whereas *Reset* will move the branch that HEAD points to, *Checkout* will move HEAD itself to point to another branch.

For instance, say we have `master` and `develop` branches which point at different commits, and we're currently on `develop` (so HEAD points to it).
If we *Reset* to `master`, `develop` itself will now point to the same commit that `master` does.
If we instead *Checkout* `master`, `develop` does not move, HEAD itself does.
HEAD will now point to `master`.

So, in both cases we're moving HEAD to point to commit A, but _how_ we do so is very different.
*Reset* will move the branch HEAD points to, *checkout* moves HEAD itself.

image::images/reset-checkout.png[]

==== Summary

Hopefully now you understand and feel more comfortable with the *reset* command, but are probably still a little confused about how exactly it differs from *checkout*.

Here's a cheat-sheet for which operations affect which trees.
The ``HEAD'' column reads ``REF'' if that command moves the reference (branch) that HEAD points to, and ``HEAD'' if it moves HEAD itself.
Pay especial attention to the 'WD Safe?' column -- if it says *NO*, take a second to think before using that command.

[options="header", cols="3,1,1,1,1"]
|================================
| | HEAD | Index | Workdir | WD Safe?
| *Commit Level* | | | |
| Reset>Keep Changes | REF | YES | NO | YES
| Reset>Delete Changes | REF | YES | YES | *NO*
| Checkout | HEAD | YES | YES | YES
|================================
