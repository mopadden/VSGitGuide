[[_undoing]]
=== Undoing Things

At any stage, you may want to undo something.
Here, we'll review a few basic tools for undoing changes that you've made.
Be careful, because you can't always undo some of these undos.
This is one of the few areas in Git where you may lose some work if you do it wrong.

One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message.
If you want to redo that commit, you can make the additional changes you forgot and amend your previous commit. As with making a new commit, stage the changes you need, or leave all changes unstaged to commit all changes.

.Amend previous commit.
image::images/vs_amend_commit.png["Amend previous commit."]

If you want to amend the commit message, you can view the branch history, view the commit details, edit the commit message and click Amend Message.

.View previous commit details.
image::images/view-last-commit-details.png["View previous commit details."]


.Amend previous commit message.
image::images/last-commit-message.png["Amend previous commit message."]

[NOTE]
The amend message option only appears on the last commit in the current branch. It is enabled when the commit message is edited.

In either case you end up with a single commit -- the second commit replaces the results of the first.

[IMPORTANT]
When you're amending your last commit, you're not so much fixing it as _replacing_ it entirely with a new, improved commit that pushes the old commit out of the way and puts the new commit in its place.
Effectively, it's as if the previous commit never happened, and it won't show up in your repository history.

The obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository history with commit messages of the form, ``Oops, forgot to add a file'' or ``Darn, fixing a typo in last commit''.

[[_unstaging]]
==== Unstaging a Staged File

Let's say accidentally staged a file and don't want to commit the changes to the file. This can be useful if you accidentally stage a file which shouldn't be tracked.
How can you unstage it?

Under the *Changes* section, right-click on the file you want and click *Unstage*.

==== Unmodifying a Modified File

What if you realize that you don't want to keep your changes to the file?
How can you easily unmodify it -- restore it back to what it looked like before you modified it?

Under the *Changes* section, right-click on the file you want and click *Undo Changes...*.

.Discard changes to a file.
video::videos/vs_reset_single_file.mp4[options=autoplay,loop]

[NOTE]
=====
Unstaging a file does not touch the file in your working directory, it mergely removes it from the staging area.
=====

[CAUTION]
=====
It's important to understand that *Undo Changes...* is a dangerous function.
Any local changes you made to that file are gone -- Git just replaced that file with the most recently-committed version.
Don't use this function unless you absolutely know that you don't want those unsaved local changes.
=====

If you would like to keep the changes you've made to that file but still need to get it out of the way for now, you can stash them in a temporary branch, which is generally a better way to go. We'll go over branching in <<ch03-git-branching#ch03-git-branching>>.

Remember, anything that is _committed_ in Git can almost always be recovered.
Even commits that were on branches that were deleted or commits that were overwritten with an amended commit can be recovered (see the ProGit book for data recovery).
However, anything you lose that was never committed is likely never to be seen again.
