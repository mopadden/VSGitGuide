[[_remote_repos]]
=== Working with Remotes

To be able to collaborate on any Git project, you need to know how to manage your remote repositories.
Remote repositories are versions of your project that are hosted on the Internet or network somewhere.
You can have several of them, each of which generally is either read-only or read/write for you.
Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work.
Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more.
In this section, we'll cover some of these remote-management skills.

[NOTE]
.Remote repositories can be on your local machine.
====
It is entirely possible that you can be working with a ``remote'' repository that is, in fact, on the same host you are.
The word ``remote'' does not necessarily imply that the repository is somewhere else on the network or Internet, only that it is elsewhere.
Working with such a remote repository would still involve all the standard pushing, pulling and fetching operations as with any other remote.
====

==== Showing Your Remotes

The remote servers for a repository can be seen at the bottom of the repository settings.


.Remotes.
image::images/remotes.png["Remotes."]

If you've cloned your repository, you should at least see `origin` -- that is the default name Git gives to the server you cloned from.

==== Adding Remote Repositories

Closing a repository implicitly adds the `origin` remote for you. You can add more remotes at the bottom of the repository settings.

.Add Remote.
image::images/AddRemote.png["Add Remote."]

Once you have added a remote you can *Sync* and choose to *Fetch* from that remote. This will make the branches of that remote available in branches so you can checkout or merge those changes into your fork.

(We'll go over what branches are and how to use them in much more detail in <<ch03-git-branching#ch03-git-branching>>.)

[[_fetching_and_pulling]]
==== Fetching and Pulling from Your Remotes

As you just saw, to get data from your remote projects, you can *Sync* and *Fetch* incoming commits. (((git commands, fetch)))
After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.

If you clone a repository, this automatically adds that remote repository under the name ``origin''.
So, *Sync*/*Fetch* fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.
It's important to note that the this only downloads the data to your local repository -- it doesn't automatically merge it with any of your work or modify what you're currently working on.
You have to merge it manually into your work when you're ready.

If your current branch is set up to track a remote branch (see the next section and <<ch03-git-branching#ch03-git-branching>> for more information), you can *Pull* to automatically fetch and then merge that remote branch into your current branch.(((git commands, pull)))
This may be an easier or more comfortable workflow for you; and by default, clone automatically sets up your local `master` branch to track the remote `master` branch (or whatever the default branch is called) on the server you cloned from.
Choosing *Sync*/*Pull* generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you're currently working on.

[[_pushing_remotes]]
==== Pushing to Your Remotes

When you have your project at a point that you want to share, you have to push it upstream.
When you choose *Sync*/*Pull* you specifiy the remote and the branch you want to push.(((git commands, push)))
The default is normally pushing your `master` branch to your `origin` server.

This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
You'll have to fetch their work first and incorporate it into yours before you'll be allowed to push.
See <<ch03-git-branching#ch03-git-branching>> for more detailed information on how to push to remote servers.