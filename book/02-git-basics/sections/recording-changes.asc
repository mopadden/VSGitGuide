=== Recording Changes to the Repository

At this point, you should have a _bona fide_ Git repository on your local machine, and a checkout or _working copy_ of all of its files in front of you.
Typically, you'll want to start making changes and committing snapshots of those changes into your repository each time the project reaches a state you want to record.

Remember that each file in your working directory can be in one of two states: _tracked_ or _untracked_.
Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged.
In short, tracked files are files that Git knows about.

Untracked files are everything else -- any files in your working directory that were not in your last snapshot and are not in your staging area.
When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven't edited anything.

As you edit files, Git sees them as modified, because you've changed them since your last commit.
As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.

.The lifecycle of the status of your files.
image::images/lifecycle.png[The lifecycle of the status of your files.]



[[_ignored_files]]
=== Ignored Files
Git needs to be know which files are non-source files that should not be tracked, by setting up an appropriate ".gitignore" file . Visual Studio automatically sets up a `.gitignore` suitable for Visual-Studio related non-source files when adding a project to Git. 
[CAUTION]
Setting up an appropriate `.gitignore` file for a new repository before you get going is generally a good idea so you don’t accidentally commit files that you really don’t want in your Git repository, such as user settings and automatically generated files. Commits polluted with files that should not be tracked can may require the use of advanced Git history rewriting tools if left to fester, to avoid crippling the standard collaboration and conflict management tools.

[TIP]
GitHub maintains a fairly comprehensive list of good `.gitignore` file examples for dozens of projects and languages at https://github.com/github/gitignore[] if you want a starting point for your project.

[[_checking_status]]
==== Checking the Status of Your Files

The main tool you use to determine which files are in which state is the Changes view in Team Explorer. When you are ready to stage changes, open up this view.

[[_tracking_files]]
==== Tracking New Files

In order to begin tracking a new file, you click on add or right-click on the file and *Stage* it.

==== Staging Modified Files

When you change (or delete) a file that was already tracked, you can right-click and *Stage* it from the *Changes* section.

[IMPORTANT]
If you make additional changes after staging a file, you should stage it again to have those additional changes included in the next commit.
If you commit before staging again, the version of the file at the time you staged it is what will be in the subsequent historical snapshot.

==== Deleting Tracked Files

When you stage and commit a file deletion, the file will no longer be tracked after the next commit. This can sometimes be useful if you accidentally committed a file which should not be tracked.

==== Ignoring Files
If a non-source file like a user setting, a binary or other build artifact is listed under *Changes*, you can ignore the file with *Ignore this local item* or ignore the type of file with *Ignore this extension*.

[IMPORTANT]
Only untracked files can be ignored, not changes to files that git is already tracking. 

==== Deleting Untracked Files
Untracked files which are not ignored can be deleted to ensure the working directory is clean working directory with no pending changes.

[TIP] 
Try to keep your working folder clear of files which should not be tracked, by ensuring temporary files are identified by  your `.gitignore`, for example using a .bak or .tmp file extension.

[[_git_diff_staged]]
==== Viewing Your Staged and Unstaged Changes

If you want to know exactly what you changed, not just which files were changed you right-click on a modified file and choose *Compare with Unmodified...*.(((git commands, diff)))

[[_committing_changes]]
==== Committing Your Changes

When your staging area is set up the way you want it, you can commit your changes.

.Committing Selected Changes.
video::videos/vscommit.mp4[options=autoplay,loop]

Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.

[TIP]
====
Before sharing your commits, you should ideally have a "clean" working folder with no remaining changes. In some cases, you may want to modify your `.gitignore` to recognise more files, or segregate changes into branches as in <<ch03-git-branching#ch03-git-branching>>.
====

==== Skipping the Staging Area

(((staging area, skipping)))
Although it can be amazingly useful for crafting commits exactly how you want them, staging individual changes is sometimes a bit more complex than you need in your workflow. 
When you have no staged changes, you can commit all changes by entering a commit message and selecting Commit All.

.Committing All Changes.
video::videos/vscommitall.mp4[options=autoplay,loop]

[WARNING]
This is convenient, but be careful; sometimes this will cause you to include unwanted changes.


[[_git_mv]]
==== Moving/Renaming Files

(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact.

[NOTE]
Git spots renames by looking at all the changes in the staging area (or between two commits). Renames will show under changes as renames once the new file and the corresponding deletion of the old file have both been staged. 