[[_remote_branches]]
=== Remote Branches

(((branches, remote)))(((references, remote)))
Remote-tracking branches are references to the state of remote branches.
They're local references that you can't move; Git moves them for you whenever you do any network communication, to make sure they accurately represent the state of the remote repository.
Think of them as bookmarks, to remind you where the branches in your remote repositories were the last time you connected to them.

If you wanted to see what the `master` branch on your `origin` remote looked like as of the last time you communicated with it, you would check the 'master` branch under the 'origin' remote.
If you were working on an issue with a partner and they pushed up an `iss53` branch, you might have your own local `iss53` branch, and the branch on the server would be represented by the remote-tracking `iss53` under the `origin` remote.

This may be a bit confusing, so let's look at an example.
Let's say you have a Git server on your network at `git.ourcompany.com`.
If you clone from this, Git's `clone` command automatically names it `origin` for you, pulls down all its data, creates a pointer to where its `master` branch is, and names it `origin/master` locally.
Git also gives you your own local `master` branch starting at the same place as origin's `master` branch, so you have something to work from.

[NOTE]
.``origin'' is not special
====
While ``master'' is the default name for a starting branch when you create a repository, and ``origin'' is the default name for a remote when you clone a repository, neither have any special meaning in Git, and you can have a starting branch and remote with different names.(((origin)))
====

.Server and local repositories after cloning
image::images/remote-branches-1.png[Server and local repositories after cloning.]

If you do some work on your local `master` branch, and, in the meantime, someone else pushes to `git.ourcompany.com` and updates its `master` branch, then your histories move forward differently.
Also, as long as you stay out of contact with your `origin` server, your `origin/master` pointer doesn't move.

.Local and remote work can diverge
image::images/remote-branches-2.png[Local and remote work can diverge.]

To synchronize your work with a given remote, you *Fetch* changes from it.
This command looks up the remote server (in this case, it's `git.ourcompany.com`), fetches any data from it that you don't yet have, and updates your local database, moving your the remote tracking pointer to its new, more up-to-date position.

.`git fetch` updates your remote-tracking branches
image::images/remote-branches-3.png[`git fetch` updates your remote references.]

To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let's assume you have another internal Git server that is used only for development by one of your sprint teams.
This server is at `git.team1.ourcompany.com`.
You can add it as a new remote reference to the project you're currently working on in the repository settings as we covered in <<ch02-git-basics-chapter#ch02-git-basics-chapter>>.
Name this remote `teamone`, which will be your shortname for that whole URL.

.Adding another server as a remote
image::images/remote-branches-4.png[Adding another server as a remote.]

Now, you can run *Fetch* from `teamone` to fetch everything the remote `teamone` server has that you don't have yet.
Because that server has a subset of the data your `origin` server has right now, Git fetches no data but sets a remote-tracking branch `master' under the `teamone` remote to point to the commit that `teamone` has as its `master` branch.

.Remote-tracking branch for `teamone/master`
image::images/remote-branches-5.png[Remote tracking branch for `teamone/master`.]

[[_pushing_branches]]
==== Pushing

(((pushing)))
When you want to share a branch with the world, you need to push it up to a remote to which you have write access.
Your local branches aren't automatically synchronized to the remotes you write to -- you have to explicitly push the branches you want to share.
That way, you can use private branches for work you don't want to share, and push up only the topic branches you want to collaborate on.

If you have a branch named `serverfix` that you want to work on with others, you can push it up the same way you pushed your first branch.
:(((git commands, push)))

The next time one of your collaborators fetches from the server, they will get a reference to where the server's version of `serverfix` is under the 'serverfix' branch undeer the remote`origin`

It's important to note that when you do a fetch that brings down new remote-tracking branches, you don't automatically have local, editable copies of them.
In other words, in this case, you don't have a new `serverfix` branch -- you have only an `origin/serverfix` pointer that you can't modify.

You can merge this work into your current working branch, or checkout the branch to work on it locally.

[[_tracking_branches]]
==== Tracking Branches

(((branches, tracking)))(((branches, upstream)))
Checking out a local branch from a remote-tracking branch automatically creates what is called a ``tracking branch'' (and the branch it tracks is called an ``upstream branch'').
Tracking branches are local branches that have a direct relationship to a remote branch.
If you're on a tracking branch and do a *Pull*, Git automatically knows which server to fetch from and which branch to merge in.

When you clone a repository, it generally automatically creates a `master` branch that tracks `origin/master`.
However, you can set up other tracking branches if you wish -- ones that track branches on other remotes, or don't track the `master` branch.

In the most common case is where the branch name you're trying to checkout (a) doesn't exist and (b) exactly matches a name on only one remote,  Git will create a tracking branch for you


==== Pulling

(((pulling)))
While *Fetch* will fetch all the changes on the server that you don't have yet, it will not modify your working directory at all.
It will simply get the data for you and let you merge it yourself.
However, you can do a *Pull*, which is essentially a *Fetch* immediately followed by a *Merge* in most cases.
If you have a tracking branch set up as demonstrated in the last section, either by explicitly setting it or by having it created for you by the `clone` or `checkout` commands, *Pull* will look up what server and branch your current branch is tracking, fetch from that server and then try to merge in that remote branch.

Generally it's better to simply do the *Fetch* and *Merge* explicitly as the magic of *Pull* can often be confusing.

[[_delete_branches]]
==== Deleting Remote Branches

(((branches, deleting remote)))
Suppose you're done with a remote branch -- say you and your collaborators are finished with a feature and have merged it into your remote's `master` branch (or whatever branch your stable codeline is in).
You can delete a remote branches the same way as local branches, by finding the branch in Team Explorer's *Branches* view under the relevant remote, right-clicking and selecting *Delete*

Basically all this does is remove the pointer from the server.
The Git server will generally keep the data there for a while until a garbage collection runs, so if it was accidentally deleted, it's often easy to recover.
