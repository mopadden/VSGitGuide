[[_git_branches_overview]]
=== Branches in a Nutshell

To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.

As you may remember from <<ch01-getting-started#ch01-getting-started>>, Git doesn't store data as a series of changesets or differences, but instead as a series of _snapshots_.

When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.
This object also contains the author's name and email address, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.

To visualize this, let's assume that you have a directory containing three files, and you stage them all and commit.
Staging the files computes a checksum for each one (the SHA-1 hash we mentioned in <<ch01-getting-started#ch01-getting-started>>), stores that version of the file in the Git repository (Git refers to them as _blobs_), and adds that checksum to the staging area:

When you create the commit, Git checksums each subdirectory and stores them as a tree object in the Git repository.
Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.(((git commands, commit)))

Your Git repository now contains five objects: three _blobs_ (each representing the contents of one of the three files), one _tree_ that lists the contents of the directory and specifies which file names are stored as which blobs, and one _commit_ with the pointer to that root tree and all the commit metadata.

.A commit and its tree
image::images/commit-and-tree.png[A commit and its tree.]

If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.

.Commits and their parents
image::images/commits-and-parents.png[Commits and their parents.]

A branch in Git is simply a lightweight movable pointer to one of these commits.
The default branch name in Git is `master`.
As you start making commits, you're given a `master` branch that points to the last commit you made.
Every time you commit, the `master` branch pointer moves forward automatically.

[NOTE]
====
The ``master'' branch in Git is not a special branch.(((master)))
It is exactly like any other branch.
The only reason nearly every repository has one is that the `git init` command creates it by default and most people don't bother to change it.
====

.A branch and its commit history
image::images/branch-and-history.png[A branch and its commit history.]

[[_create_new_branch]]
==== Creating a New Branch

(((branches, creating)))
What happens when you create a new branch?
Well, doing so creates a new pointer for you to move around.
You create a branch from the Team Explorer *Branches* view, but right-clicking on the parent branch (usually `master`) as a starting point and choosing *New Local Branch From...*.

.Create Branch.
image::images/vsbranch.gif[Create Branch.]

This creates a new pointer to the tip of the existing branch. Git keeps track of what branch you are on with an internal `HEAD` pointer.

.Two branches pointing into the same series of commits
image::images/two-branches.png[Two branches pointing into the same series of commits.]

[[_switching_branches]]
==== Switching Branches

(((branches, switching)))
To switch to an existing branch, you *Checkout* the branch you want to work on .(((git commands, checkout)))

.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch.]

What is the significance of that?
When you do another commit, the head branch moves forward.

.The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[The HEAD branch moves forward when a commit is made.]

[NOTE]
.*View History* only shows the history on the selected branch.

.HEAD moves when you checkout.
image::images/checkout-master.png["HEAD moves when you checkout.""]

The checkout did two things.
It moved the HEAD pointer back to point to the `master` branch, and it restored the files in your working directory back to the snapshot that `master` points to.
This also means the changes you make from this point forward will diverge from an older version of the project.
It essentially rewinds the work you've done in your `testing` branch so you can go in a different direction.

[NOTE]
.Switching branches changes files in your working directory
====
It's important to note that when you switch branches in Git, files in your working directory will change.
If you switch to an older branch, your working directory will be restored to what it looked like the last time you committed on that branch.
If Git cannot do it cleanly, it will not let you switch at all.
====

[[divergent_history]]
.Divergent history.
image::images/advance-master.png["Divergent history."]

Because a branch in Git is actually a simple file that contains the SHA checksum of the commit it points to, branches are cheap to create and destroy.
Creating a new branch is as quick and simple as writing the checksum and a newline to a file.

This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.
This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.
Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.
These features help encourage developers to create and use branches often.

Let's see why you should do so.

